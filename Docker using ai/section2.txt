# SECTION 2: BASIC COMMANDS & OPERATIONS

## 1. Docker CLI Basic Commands

### Definition
Docker CLI (Command Line Interface) is the primary tool for interacting with Docker. It allows users to manage Docker containers, images, networks, and volumes through a set of commands.

### Detailed Explanation
The Docker CLI provides a comprehensive set of commands to perform various operations. These commands are structured as `docker <command> <sub-command> [options]`. It is essential for managing the Docker environment and performing tasks such as starting containers, building images, and viewing logs.

### Key Commands
- `docker --help`: Lists all available Docker commands.
- `docker version`: Displays the installed Docker version.
- `docker info`: Provides detailed information about the Docker installation.
- `docker images`: Lists all Docker images on the system.
- `docker ps`: Shows running containers.
- `docker ps -a`: Shows all containers, including stopped ones.

### Practical Example
```bash
# Check Docker version and system info
docker version
docker info

# List images and containers
docker images
docker ps
docker ps -a
```

## 2. Running Containers

### Definition
Running a container involves creating an instance of a Docker image and executing it. Containers can be run in interactive or detached modes, with options for volume mounting and port mapping.

### Detailed Explanation
Containers are lightweight, portable, and isolated environments that run applications. They can be started with specific configurations using options like `-d` for detached mode, `-it` for interactive mode, and `-v` for volume mounting. This flexibility allows developers to run applications consistently across different environments.

### Key Commands
- `docker run`: Starts a new container.
- `-d`: Runs the container in detached mode.
- `-it`: Runs the container interactively.
- `-v`: Mounts a volume.
- `--name`: Assigns a name to the container.
- `--rm`: Automatically removes the container when it exits.

### Practical Example
```bash
# Run a Node.js container with mounted code
docker run -d \
  --name myapp \
  -v $(pwd):/app \
  -w /app \
  node:16 node index.js
```

## 3. Managing Containers

### Definition
Managing containers involves controlling their lifecycle, including starting, stopping, restarting, and removing them.

### Detailed Explanation
Containers have a lifecycle that includes creation, execution, and termination. Docker provides commands to manage these states, allowing users to start, stop, and remove containers as needed. Proper management ensures efficient use of resources and system stability.

### Key Commands
- `docker start`: Starts a stopped container.
- `docker stop`: Stops a running container.
- `docker restart`: Restarts a container.
- `docker rm`: Removes a container.
- `docker rm -f`: Forcefully removes a running container.

### Practical Example
```bash
# Create and manage container lifecycle
docker run -d --name demo node:16
docker stop demo
docker start demo
docker restart demo
docker rm demo
```

## 4. Viewing Logs

### Definition
Docker logs provide access to the standard output and error streams of a container, useful for debugging and monitoring.

### Detailed Explanation
Logs are essential for understanding the behavior of applications running inside containers. Docker allows users to view logs in real-time or historically, with options to follow log output and filter by time or number of lines.

### Key Commands
- `docker logs`: Displays logs for a container.
- `-f`: Follows log output.
- `--tail N`: Shows the last N lines of logs.
- `-t`: Includes timestamps in logs.

### Practical Example
```bash
# Create container with logging
docker run -d --name logger node:16 node -e "
setInterval(() => {
  console.log('Server running...');
}, 2000)"

# View logs different ways
docker logs logger
docker logs -f logger
docker logs --tail 5 logger
```

## 5. Container Shell Access

### Definition
Shell access allows users to interact with a running container's file system and processes through a command-line interface.

### Detailed Explanation
Accessing a container's shell is useful for debugging, maintenance, and executing commands directly within the container. Docker provides the `exec` command to open a shell session or run specific commands inside a container.

### Key Commands
- `docker exec -it`: Opens an interactive shell session in a container.
- `docker exec`: Executes a command in a running container.

### Practical Example
```bash
# Run container and access shell
docker run -d --name shell-demo node:16 tail -f /dev/null
docker exec -it shell-demo bash
# Inside container: node -v
# Inside container: npm -v
# Exit: exit
```

## 6. Port Mapping

### Definition
Port mapping connects a container's internal ports to the host machine's ports, enabling external access to services running inside the container.

### Detailed Explanation
Port mapping is crucial for exposing containerized applications to the outside world. It allows users to specify which host ports should forward traffic to which container ports, facilitating communication between the host and the container.

### Key Commands
- `-p HOST_PORT:CONTAINER_PORT`: Maps a host port to a container port.

### Practical Example
```bash
# Create simple Node.js web server
docker run -d \
  --name web \
  -p 8080:3000 \
  node:16 \
  node -e "
    require('http')
      .createServer((req, res) => res.end('Hello Docker!'))
      .listen(3000)
  "

# Test: curl localhost:8080
```

## Best Practices
1. Always name containers for easy management.
2. Use specific image tags to ensure consistency.
3. Regularly clean up unused resources to free up space.
4. Document port mappings for clarity.
5. Use volume mounts for development to persist data.
6. Follow logs with limits to avoid overwhelming the terminal.

## Common Pitfalls
1. Forgetting to map ports, leading to inaccessible services.
2. Not cleaning up containers, resulting in resource waste.
3. Using incorrect shell commands, causing errors.
4. Ignoring log sizes, which can fill up disk space.
5. Running containers as root, posing security risks.
6. Not using volume mounts in development, leading to data loss.

## Key Commands Summary
```bash
# Basic Operations
docker ps                  # List running containers
docker ps -a              # List all containers
docker images             # List images
docker run                # Run a container
docker stop              # Stop container
docker rm                # Remove container

# Logs and Shell
docker logs <container>   # View logs
docker exec -it          # Access shell

# Port and Volume
-p <host>:<container>    # Port mapping
-v <host>:<container>    # Volume mounting
```
